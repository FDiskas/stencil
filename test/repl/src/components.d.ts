/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  InputFile,
  OutputFile,
} from './compiler/declarations';

export namespace Components {
  interface ReplHeader {
    'appName': string;
  }
  interface ReplInputFile {
    'code': string;
    'isSelected': boolean;
    'name': string;
  }
  interface ReplInputPanel {
    'inputs': InputFile[];
    'selectedName': string;
  }
  interface ReplInputSelection {
    'isSelected': boolean;
    'name': string;
  }
  interface ReplInputSelector {
    'inputs': InputFile[];
    'selectedName': string;
  }
  interface ReplOutputFile {
    'code': string;
    'isSelected': boolean;
    'name': string;
  }
  interface ReplOutputFile {
    'code': string;
    'isSelected': boolean;
    'name': string;
  }
  interface ReplOutputPanel {
    'outputs': OutputFile[];
    'selectedTarget': string;
  }
  interface StencilRepl {
    'appName': string;
    'inputs': InputFile[];
    'selectedTarget': string;
    'stencilCompilerPath': string;
  }
}

declare global {


  interface HTMLReplHeaderElement extends Components.ReplHeader, HTMLStencilElement {}
  var HTMLReplHeaderElement: {
    prototype: HTMLReplHeaderElement;
    new (): HTMLReplHeaderElement;
  };

  interface HTMLReplInputFileElement extends Components.ReplInputFile, HTMLStencilElement {}
  var HTMLReplInputFileElement: {
    prototype: HTMLReplInputFileElement;
    new (): HTMLReplInputFileElement;
  };

  interface HTMLReplInputPanelElement extends Components.ReplInputPanel, HTMLStencilElement {}
  var HTMLReplInputPanelElement: {
    prototype: HTMLReplInputPanelElement;
    new (): HTMLReplInputPanelElement;
  };

  interface HTMLReplInputSelectionElement extends Components.ReplInputSelection, HTMLStencilElement {}
  var HTMLReplInputSelectionElement: {
    prototype: HTMLReplInputSelectionElement;
    new (): HTMLReplInputSelectionElement;
  };

  interface HTMLReplInputSelectorElement extends Components.ReplInputSelector, HTMLStencilElement {}
  var HTMLReplInputSelectorElement: {
    prototype: HTMLReplInputSelectorElement;
    new (): HTMLReplInputSelectorElement;
  };

  interface HTMLReplOutputFileElement extends Components.ReplOutputFile, HTMLStencilElement {}
  var HTMLReplOutputFileElement: {
    prototype: HTMLReplOutputFileElement;
    new (): HTMLReplOutputFileElement;
  };

  interface HTMLReplOutputFileElement extends Components.ReplOutputFile, HTMLStencilElement {}
  var HTMLReplOutputFileElement: {
    prototype: HTMLReplOutputFileElement;
    new (): HTMLReplOutputFileElement;
  };

  interface HTMLReplOutputPanelElement extends Components.ReplOutputPanel, HTMLStencilElement {}
  var HTMLReplOutputPanelElement: {
    prototype: HTMLReplOutputPanelElement;
    new (): HTMLReplOutputPanelElement;
  };

  interface HTMLStencilReplElement extends Components.StencilRepl, HTMLStencilElement {}
  var HTMLStencilReplElement: {
    prototype: HTMLStencilReplElement;
    new (): HTMLStencilReplElement;
  };
  interface HTMLElementTagNameMap {
    'repl-header': HTMLReplHeaderElement;
    'repl-input-file': HTMLReplInputFileElement;
    'repl-input-panel': HTMLReplInputPanelElement;
    'repl-input-selection': HTMLReplInputSelectionElement;
    'repl-input-selector': HTMLReplInputSelectorElement;
    'repl-output-file': HTMLReplOutputFileElement;
    'repl-output-file': HTMLReplOutputFileElement;
    'repl-output-panel': HTMLReplOutputPanelElement;
    'stencil-repl': HTMLStencilReplElement;
  }
}

declare namespace LocalJSX {
  interface ReplHeader {
    'appName'?: string;
  }
  interface ReplInputFile {
    'code'?: string;
    'isSelected'?: boolean;
    'name'?: string;
    'onFileUpdate'?: (event: CustomEvent<InputFile>) => void;
  }
  interface ReplInputPanel {
    'inputs'?: InputFile[];
    'selectedName'?: string;
  }
  interface ReplInputSelection {
    'isSelected'?: boolean;
    'name'?: string;
    'onFileDelete'?: (event: CustomEvent<InputFile>) => void;
    'onFileSelect'?: (event: CustomEvent<InputFile>) => void;
  }
  interface ReplInputSelector {
    'inputs'?: InputFile[];
    'selectedName'?: string;
  }
  interface ReplOutputFile {
    'code'?: string;
    'isSelected'?: boolean;
    'name'?: string;
  }
  interface ReplOutputFile {
    'code'?: string;
    'isSelected'?: boolean;
    'name'?: string;
  }
  interface ReplOutputPanel {
    'onTargetUpdate'?: (event: CustomEvent<string>) => void;
    'outputs'?: OutputFile[];
    'selectedTarget'?: string;
  }
  interface StencilRepl {
    'appName'?: string;
    'inputs'?: InputFile[];
    'selectedTarget'?: string;
    'stencilCompilerPath'?: string;
  }

  interface IntrinsicElements {
    'repl-header': ReplHeader;
    'repl-input-file': ReplInputFile;
    'repl-input-panel': ReplInputPanel;
    'repl-input-selection': ReplInputSelection;
    'repl-input-selector': ReplInputSelector;
    'repl-output-file': ReplOutputFile;
    'repl-output-file': ReplOutputFile;
    'repl-output-panel': ReplOutputPanel;
    'stencil-repl': StencilRepl;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'repl-header': LocalJSX.ReplHeader & JSXBase.HTMLAttributes<HTMLReplHeaderElement>;
      'repl-input-file': LocalJSX.ReplInputFile & JSXBase.HTMLAttributes<HTMLReplInputFileElement>;
      'repl-input-panel': LocalJSX.ReplInputPanel & JSXBase.HTMLAttributes<HTMLReplInputPanelElement>;
      'repl-input-selection': LocalJSX.ReplInputSelection & JSXBase.HTMLAttributes<HTMLReplInputSelectionElement>;
      'repl-input-selector': LocalJSX.ReplInputSelector & JSXBase.HTMLAttributes<HTMLReplInputSelectorElement>;
      'repl-output-file': LocalJSX.ReplOutputFile & JSXBase.HTMLAttributes<HTMLReplOutputFileElement>;
      'repl-output-file': LocalJSX.ReplOutputFile & JSXBase.HTMLAttributes<HTMLReplOutputFileElement>;
      'repl-output-panel': LocalJSX.ReplOutputPanel & JSXBase.HTMLAttributes<HTMLReplOutputPanelElement>;
      'stencil-repl': LocalJSX.StencilRepl & JSXBase.HTMLAttributes<HTMLStencilReplElement>;
    }
  }
}


